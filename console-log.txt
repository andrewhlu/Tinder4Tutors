[ { faceAnnotations: [],
    landmarkAnnotations: [],
    logoAnnotations: [],
    labelAnnotations: [ [Object], [Object], [Object], [Object], [Object] ],
    textAnnotations: [],
    safeSearchAnnotation: null,
    imagePropertiesAnnotation: null,
    error: null,
    cropHintsAnnotation: null,
    fullTextAnnotation: null,
    webDetection: null } ]



{ locations: [],
  properties: [],
  mid: '/m/013s93',
  locale: '',
  description: 't shirt',
  score: 0.8230968713760376,
  confidence: 0,
  topicality: 0.8230968713760376,
  boundingPoly: null }




 Database {
  repo_: 
   Repo {
     repoInfo_: 
      RepoInfo {
        secure: true,
        namespace: 'academic-empire-192708',
        webSocketOnly: false,
        persistenceKey: '',
        host: 'academic-empire-192708.firebaseio.com',
        domain: 'firebaseio.com',
        internalHost: 'academic-empire-192708.firebaseio.com' },
     app: 
      FirebaseApp {
        firebaseInternals_: [Object],
        services_: [Object],
        isDeleted_: false,
        name_: '[DEFAULT]',
        options_: [Object],
        INTERNAL: [Object] },
     dataUpdateCount: 0,
     statsListener_: null,
     eventQueue_: EventQueue { eventLists_: [], recursionDepth_: 0 },
     nextWriteId_: 1,
     interceptServerDataCallback_: null,
     onDisconnect_: SparseSnapshotTree { value_: null, children_: null },
     persistentConnection_: 
      PersistentConnection {
        repoInfo_: [Object],
        onDataUpdate_: [Function: bound ],
        onConnectStatus_: [Function: bound ],
        onServerInfoUpdate_: [Function: bound ],
        authTokenProvider_: [Object],
        authOverride_: undefined,
        id: 0,
        log_: [Function],
        interruptReasons_: {},
        listens_: {},
        outstandingPuts_: [],
        outstandingPutCount_: 0,
        onDisconnectRequestQueue_: [],
        connected_: false,
        reconnectDelay_: 1000,
        maxReconnectDelay_: 300000,
        securityDebugCallback_: null,
        lastSessionId: null,
        establishConnectionTimer_: [Object],
        visible_: true,
        requestCBHash_: {},
        requestNumber_: 0,
        realtime_: null,
        authToken_: null,
        forceTokenRefresh_: false,
        invalidAuthTokenCount_: 0,
        firstConnection_: true,
        lastConnectionAttemptTime_: null,
        lastConnectionEstablishedTime_: null },
     stats_: StatsCollection { counters_: {} },
     server_: 
      PersistentConnection {
        repoInfo_: [Object],
        onDataUpdate_: [Function: bound ],
        onConnectStatus_: [Function: bound ],
        onServerInfoUpdate_: [Function: bound ],
        authTokenProvider_: [Object],
        authOverride_: undefined,
        id: 0,
        log_: [Function],
        interruptReasons_: {},
        listens_: {},
        outstandingPuts_: [],
        outstandingPutCount_: 0,
        onDisconnectRequestQueue_: [],
        connected_: false,
        reconnectDelay_: 1000,
        maxReconnectDelay_: 300000,
        securityDebugCallback_: null,
        lastSessionId: null,
        establishConnectionTimer_: [Object],
        visible_: true,
        requestCBHash_: {},
        requestNumber_: 0,
        realtime_: null,
        authToken_: null,
        forceTokenRefresh_: false,
        invalidAuthTokenCount_: 0,
        firstConnection_: true,
        lastConnectionAttemptTime_: null,
        lastConnectionEstablishedTime_: null },
     statsReporter_: 
      StatsReporter {
        server_: [Object],
        statsToReport_: {},
        statsListener_: [Object] },
     transactionQueueTree_: Tree { name_: '', parent_: null, node_: [Object] },
     infoData_: SnapshotHolder { rootNode_: [Object] },
     infoSyncTree_: 
      SyncTree {
        listenProvider_: [Object],
        syncPointTree_: [Object],
        pendingWriteTree_: [Object],
        tagToQueryMap_: {},
        queryToTagMap_: {} },
     serverSyncTree_: 
      SyncTree {
        listenProvider_: [Object],
        syncPointTree_: [Object],
        pendingWriteTree_: [Object],
        tagToQueryMap_: {},
        queryToTagMap_: {} },
     __database: [Circular] },
  root_: 
   Reference {
     repo: 
      Repo {
        repoInfo_: [Object],
        app: [Object],
        dataUpdateCount: 0,
        statsListener_: null,
        eventQueue_: [Object],
        nextWriteId_: 1,
        interceptServerDataCallback_: null,
        onDisconnect_: [Object],
        persistentConnection_: [Object],
        stats_: [Object],
        server_: [Object],
        statsReporter_: [Object],
        transactionQueueTree_: [Object],
        infoData_: [Object],
        infoSyncTree_: [Object],
        serverSyncTree_: [Object],
        __database: [Circular] },
     path: Path { pieces_: [], pieceNum_: 0 },
     queryParams_: 
      QueryParams {
        limitSet_: false,
        startSet_: false,
        startNameSet_: false,
        endSet_: false,
        endNameSet_: false,
        limit_: 0,
        viewFrom_: '',
        indexStartValue_: null,
        indexStartName_: '',
        indexEndValue_: null,
        indexEndName_: '',
        index_: PriorityIndex {} },
     orderByCalled_: false },
  INTERNAL: DatabaseInternals { database: [Circular] } }